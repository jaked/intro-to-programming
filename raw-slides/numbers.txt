-*- mode: markup; -*-

* Numbers

Our first data type!

** Three ways of looking at numbers

## fragments

(And every other data type.)

##.

** _none

## fragments

  # How they are represented inside the computer

  # The syntax for writing them in our langauge

  # What we can do with them

##.

** How numbers are represented in the computer

## fragments

We don’t really have to worry about it. 🎉

(Most of the time.) 🤨

##.

** If you really must know

## fragments

Numbers in Javascript are represented in a 64-bit binary floating point format.

Basically scientific notation for computers.

##.

** How we write numbers

** `0`

** `1`

** `2`

** `3`

** `1000000000`

** `1_000_000_000`

** `9_007_199_254_740_991`

## fragments

Nine quadrillion seven trillion one hundred ninety-nine billion two hundred
fifty-four million seven hundred forty thousand nine hundred ninety-one

##.

** `-1`

** `-2`

** `0.0`

** `1.2`

** `-0.5`

** `1.4142135623730951`

## fragments

(Best approximation of the square root of 2)

##.


** `2.718281828459045`

## fragments

(Best approximation of \em{e})

##.

** `3.141592653589793`

## fragments

(Best approximation of π)

##.

** `1.7976931348623157e+308`

## fragments

(Biggest number we can represent in Javascript.)

##.

** `1.7976931348623155e+308`

## fragments

(The \em{second} biggest number we can represent in Javascript.)

The gap between it and the biggest is `1.99584030953472e+292`

##.


** `2.220446049250313e-16`

** `5e-324`

** `Infinity`

** `NaN`

** What we can do with numbers

## fragments

Math, mostly.

##.

** Some operators on numbers

## fragments

`+`

`-`

`*`

`/`

`%`

`**`

##.

** 1 + 2 ⟹ 3

** 10 - 6 ⟹ 4

** 5 * 10 ⟹ 50

** 50 / 10 ⟹ 5

** 1 / 3 ⟹ 0.3333333333333333

## fragments

Note, this is an approximation.

##.

** 0.1 + 0.5 ⟹ 0.6

** 0.1 + 0.2 ⟹ 0.30000000000000004

## fragments

wtf?!

##.

** 23 % 12 ⟹ 11

** 52 % 7 ⟹ 3

** 2 ** 8 ⟹ 256

** 2 ** 55 ⟹ 36028797018963970

## fragments

Uh, oh. That’s not right. 💩

Should be `36028797018963968`

Would be better as `3.602879701896397e16`

##.

** 2**70 ⟹ 1.1805916207174113e+21

** 1 + 2 * 3 ⟹ 7

** (1 + 2) * 3 ⟹ 9
