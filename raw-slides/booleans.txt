-*- mode: markup; -*-

* Booleans

The simplest data type!

** Named after this guy

\img{/img/360px-George_Boole_color.jpg}

George Boole, English mathematician and logician

** Only two values

\p{\fragment{true} \fragment{false}}

** Can also think of them as

## fragments

yes or no

on or off

etc.

##.

** Used with `if` â€¦

   if (<boolean>) {
     // do something
   }

## fragments

Yeah, we havenâ€™t learned about `if` yet.

##.

** â€¦ and with `while`

   while (<boolean>) {
      // do something
   }

## fragments

Havenâ€™t learned about `while` yet, either.

Weâ€™ll get to it.

##.

** But they are also values in their own right

** We can ask our usual questons about values

## fragments

  # How they are represented inside the computer

  # The syntax for writing them in our langauge

  # What we can do with them

##.

** How are they represented in the computer?

## fragments

This time it really doesnâ€™t matter.

I literally do not know.

##.

** How do we write booleans?

** `true`

** `false`

** Thatâ€™s it.

## fragments

Unlike numbers, there arenâ€™t different ways of writing the same literal value.

##.

** What can we do with booleans?

## fragments

Same as with numbers: combine them in expressions.

But the operators are different.

##.

** Three logicial operators

\fragment{AND}\fragment{, OR}\fragment{, and NOT}

## fragments

These are the three operators defined in Boolean Algrebra by our friend George
Boole.

##.

** And

## fragments

Writen `&&`

`true && false`

Evaluates to true if, and only if, both of its operands are true.

##.

** true && true âŸ¹ true

** true && false âŸ¹ false

** false && true âŸ¹ false

** false && false âŸ¹ false

** Or

## fragments

Written `||`

`true || false`

Evaluates to true of either, or both, operands are true.

##.

** true || true âŸ¹ true

** true || false âŸ¹ true

** false || true âŸ¹ true

** false || false âŸ¹ false

** Not

## fragments

Written `!`

`!true`

Flips the logical value, true to false and false to true.

##.

** !true âŸ¹ false

** !false âŸ¹ true

** _none

Writing expressions with all literal values (`true` and `false`) is kinda silly
because we could just figure out what the value is and write that.

** _none

But they make a lot more sense when we are writing expressions in terms of
named values.

** _none

Some examples.

** Am I hangry?

## fragments

Suppose `hungry` is a boolean that says whether Iâ€™m hungry and `angry` says
whether Iâ€™m angry.

Whatâ€™s an expression that captures whether or not Iâ€™m hangry?

##.

** `hungry && angry`

** Do I stay up late?

## fragments

Suppose `homework` is a boolean that says whether I have homework to grade and
`newEpisodes` is a boolean that says whethere there new episodes of my favorite
TV show.

Whatâ€™s an expression that captures whether I will stay up late if I always stay
up late to grade homework or to watch new episodes of my favorite show?

##.

** `homework || newEpisodes`

** Am I awake?

## fragments

`asleep` is a boolean that says whether Iâ€™m asleep.

Whatâ€™s an expression that says whether Iâ€™m awake?

##.

** `!asleep`

** Operators on other types that produce boolean values

** Equality comparisons

\fragments{\code{===}\code{ !==}}

** Numeric comparisons

\fragments{\code{ <}\code{ >}\code{ <=}\code{ >=}}

** 1 === 2 âŸ¹ false

** 1 !== 2 âŸ¹ true

** 10 < 20 âŸ¹ true

** 10 < 10 âŸ¹ false

** 10 <= 10 âŸ¹ true

** 10 <= (11 - 1) âŸ¹ true

** 100 >= 200 âŸ¹ false

** You can use the equality operators on booleans

## fragments

But itâ€™s very rarely needed.

##.

** true === false âŸ¹ false

** true !== false âŸ¹ true

** _none

And definitely donâ€™t compare the value of a boolean expression to a boolean
literal.

** Instead of

`x === true`

## fragments

just write:

`x`

##.

** Otherwise why not write?

## fragments

`(x === true) === true`

Or maybe?

`((x === true) === true) === true`

ðŸ¤”

##.

** And instead of

`x === false`

or

`x !== true`

## fragments

just write:

`!x`

##.

* tl;dr

## fragments

Booleans are just another kind of value.

##.
